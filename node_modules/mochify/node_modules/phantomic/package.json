{
  "name": "phantomic",
  "version": "1.1.0",
  "description": "Pipe stdin to Phantom.JS and console messages to stdout",
  "author": {
    "name": "Maximilian Antoni",
    "email": "mail@maxantoni.de",
    "url": "http://maxantoni.de"
  },
  "contributors": [
    {
      "name": "Andrey Popp",
      "email": "8mayday@gmail.com"
    },
    {
      "name": "Deema Yvanow",
      "email": "df.creative@gmail.com"
    },
    {
      "name": "Jacob Waller",
      "email": "jacob@krawaller.se"
    }
  ],
  "homepage": "https://github.com/mantoni/phantomic",
  "main": "./lib/phantomic.js",
  "bin": {
    "phantomic": "bin/cmd.js"
  },
  "engines": {
    "node": ">=0.10"
  },
  "dependencies": {
    "through": "^2.3",
    "source-mapper": "^1.0",
    "es5-shim": "^4.0",
    "cross-spawn": "^0.2"
  },
  "devDependencies": {
    "browserify": "^8.1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/mantoni/phantomic.js.git"
  },
  "license": "MIT",
  "readme": "# Phantomic\n\n[![SemVer]](http://semver.org)\n[![License]](https://github.com/mantoni/phantomic/blob/master/LICENSE)\n\n- Pipes stdin to [PhantomJS](http://phantomjs.org)\n- Writes script console output to stdout\n- Writes script errors to stderr\n- Exit code 0 if nothing threw, otherwise 1\n\n## Install\n\n```\nnpm install -g phantomic\n```\n\n## Usage\n\nPhantomic does not include PhantomJS itself. Make sure the `phantomjs`\nexecutable is in your `PATH` or specify with `--phantomjs`.\n\n```\nUsage: phantomic [options] [file]\n\nOptions:\n    --debug                Launch the WebKit debugger in a browser\n    --port <num>           Explicit port binding for temporary web server. If\n                           no port is specified, a random free port is used.\n    --phantomjs <path>     Use specified phantomjs binary\n    --web-security <bool>  Enables PhantomJS web security and forbids\n                           cross-domain XHR (default is true)\n    --brout                Assume brout is part of the JS\n```\n\nPipe any script to phantomic:\n\n```\nphantomic < ./test.js\n```\n\nOpening a file:\n\n```\nphantomic ./test.js\n```\n\nIf you are using phantomic from a Makefile with a local install, you will have\nto include it in the PATH:\n\n```\nBIN = ./node_modules/.bin\nPATH := $(BIN):$(PATH)\n\ntest:\n  browserify ./test.js | phantomic\n```\n\n## Debugging\n\nPut a `debugger;` statement somewhere and run:\n\n```\nphantomic --debug < ./test.js\n```\n\nThis will open the WebKit inspector in your browser.\n\n## Exit detection\n\nBy default, phantomic will report an error if anything was logged to\n`console.error`. Program termination is detected by observing delays in the\nevent queue and the last log statement that was received.\n\nTo make exit detection more reliable, [brout][] can be used. If brout is part\nof the given script, run phantomic with `--brout` to install handlers for the\n`out`, `err` and `exit` events. Also make sure `process.exit(code)` is called.\n\n## API\n\nYou can use phantomic from your own node scripts like this:\n\n```js\nvar phantomic = require('phantomic');\n\nphantomic(process.stdin, {\n  debug : false,\n  port  : 0,\n  brout : false,\n  'web-security': false\n}, function (code) {\n  process.exit(code);\n}).pipe(process.stdout);\n```\n\n## Run the test cases\n\n```\nnpm install\nmake\n```\n\n## Compatibility\n\n- Node 0.10 or later\n- PhantomJS 1.9\n\n## License\n\nMIT\n\n[SemVer]: http://img.shields.io/:semver-%E2%9C%93-brightgreen.svg\n[License]: http://img.shields.io/npm/l/phantomic.svg\n[brout]: https://github.com/mantoni/brout.js\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mantoni/phantomic.js/issues"
  },
  "_id": "phantomic@1.1.0",
  "dist": {
    "shasum": "326e90f74fced02fc718b7caeda7aa14f759eecb"
  },
  "_from": "phantomic@^1.0",
  "_resolved": "https://registry.npmjs.org/phantomic/-/phantomic-1.1.0.tgz"
}
